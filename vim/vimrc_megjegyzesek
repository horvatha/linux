.vimrc (.exrc)
================
Nekem az alábbi rész van a vimrc fájlomban, az első része felelős azért,
hogy a vim behúzza a sort a vezérlő szerkezetek (if, while, for, def,
class) után 4 karakterrel (sw=shiftwidth=4).
Fontos: Pythonban behúzás csoportosít, nem kapcsos zárójel. 

A folding esetén behajtja a beljebb kezdődő sorokat, így jól látható egy
nagyobb program szerkezete. zi vel kinyitható becsukható az összes fold.
(Megjegyzéséhez: A z olyan mint egy összehajtott lap.)
Bővebben
:help fold-commands
OPENING AND CLOSING FOLDS  része

Az "au Syntax python" kezdetű sorok csak python program megnyitásakor hajtódnak végre.
Bennük a "let @x" az x regiszterbe rak valamit, amit a "xp -vel (idézőjel után xp) lehet
beszúrni.
Listázásuk
:registers
Lásd még
:help registers

Végül pár regisztert definiáltam LaTeX-hez is.

A teljes .vimrc-m itt van: http://mail.roik.bmf.hu/repo/linux/vim/vimrc

" For python indent
autocmd BufEnter *.py,*.pyw set smartindent smarttab cinwords=if,while,def,class,else,elif,except,finally,for,try,do,switch sw=4 tw=0
" For python folding
au FileType python set foldmethod=indent
au Syntax python set textwidth=0

au Syntax python let @d = "def fn():\n    pass\n"
au Syntax python let @c = "class C:\n    def __init__(self):\n        pass"
au Syntax python let @p = "print(\"\".format())\n"
au Syntax python let @m = "if __name__ == \"__main__\":\n    pass"
au Syntax python let @f = "    nev = models.CharField(\"ékezetes név\", max_length=100, blank=True, unique=True)\n"

" ehelyett/mellett a vimlatex használható
" registers for LaTeX
au BufEnter *.tex let @i = "\\begin{figure}\n\\includegraphics[width=0.7\\textwidth]{kepneve}\n\\caption{x}\n\\label{fig:x}\n\\end{figure}\n"
au BufEnter *.tex let @t = "\\begin{tabular}{|*{5}{r}|}\n\\hline\n & \\\\\n\\end{tabular}\n"
au BufEnter *.tex let @e = "\\begin{x}\n\\end{x}\n"
au BufEnter *.tex let @z = "\\begin{tikzpicture}[scale=1.5]\n\\end{tikzpicture}\n"
